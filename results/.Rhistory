dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)
plot(dose,drugA,type="b")
opar <- par()
opar <- par(no.readonly = TRUE)
plot(dose,drugA,type="b")
par(opar)
par(lty=2,pch=17)
par(opar)
dev.off()
opar <- par(no.readonly = TRUE)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(lty=1,pch=16)
plot(dose,drugA,type="b")
help("par")
par(lty=1,pch=17)
plot(dose,drugA,type="b")
par(opar)
plot(dose,drugA,type="b")
par(lty=2,pch=1)
plot(dose,drugA,type="b")
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
open3d()
# Needs to be a bigger window than the default
par3d(windowRect = c(100, 100, 612, 612))
Sys.sleep(0.1) # Allow sluggish window managers to catch up
parent <- currentSubscene3d()
mfrow3d(2, 2)
plot3d(x, y, z)
next3d(reuse = FALSE)
bgplot3d(plot(y, z))
next3d(reuse = FALSE)
bgplot3d(plot(x, z))
next3d(reuse = FALSE)
legend3d("center", c("2D Points", "3D Points"), pch = c(1, 16))
useSubscene3d(parent)
install.packages("E:/MachineLearning/machine-learning-ex1/machine-learning-ex1/ex1/rgl_0.95.1441.zip", repos = NULL, type = "win.binary")
rgl
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
rgl::open3d()
# Needs to be a bigger window than the default
rgl::par3d(windowRect = c(100, 100, 612, 612))
rgl::Sys.sleep(0.1) # Allow sluggish window managers to catch up
parent <- rgl::currentSubscene3d()
rgl::mfrow3d(2, 2)
rgl::plot3d(x, y, z)
rgl::next3d(reuse = FALSE)
rgl::bgplot3d(plot(y, z))
rgl::next3d(reuse = FALSE)
rgl::bgplot3d(plot(x, z))
rgl::next3d(reuse = FALSE)
rgl::legend3d("center", c("2D Points", "3D Points"), pch = c(1, 16))
rgl::useSubscene3d(parent)
install.packages("devtools")
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
install.packages("F:/download/plotly.js-1.14.2.zip", repos = NULL, type = "win.binary")
install.packages("F:/download/plotly_3.6.0.zip", repos = NULL, type = "win.binary")
library(plotly)
# volcano is a numeric matrix that ships with R
plot_ly(z = volcano, type = "surface")
plotly::plot_ly(z = volcano, type = "surface")
install.packages("F:/download/ggplot2_2.1.0.zip", repos = NULL, type = "win.binary")
library(plotly)
library(ggplot2)
install.packages("F:/download/gtable_0.2.0.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/Rcpp_0.12.5.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/munsell_0.4.3.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/colorspace_1.2-6.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/plyr_1.8.4.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/htmltools_0.3.5.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/tibble_1.1.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/assertthat_0.1.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/viridis_0.3.4.zip", repos = NULL, type = "win.binary")
library(plotly)
install.packages("F:/download/gridExtra_2.2.1.zip", repos = NULL, type = "win.binary")
library(plotly)
library(plotly)
plot_ly(z = volcano, type = "surface")
install.packages("F:/download/yaml_2.1.13.zip", repos = NULL, type = "win.binary")
plot_ly(z = volcano, type = "surface")
methods(*)
methods(sum())
methods(sum)
getAnywhere(sum())
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
ComputeCost<-function(x,y,theta){
help file()
help("file")
help("scan")
help("file")
help("scan")
read.arff<-function(path){
scan(file="");
}
read.arff("ewwe")
help("readLines")
help("scan")
help("file")
help("open")
path<-"E:\MachineLearning\R\functions\EQ.arff";
path<-"E:/MachineLearning/R/functions/EQ.arff";
open(path,"r");
path<-character("E:/MachineLearning/R/functions/EQ.arff");
path<-"E:/MachineLearning/R/functions/EQ.arff";
open(path,"r");
help("open")
open(file("path"),"r");
open(file(path),"r");
line<-readLines();
path<-"E:/MachineLearning/R/functions/EQ.arff";
open(file(path),"r");
Line<-readLines();
help("readlines")
help("readLines")
help("readline")
help("readLines")
Date<-readLines(path,2);
Date<-readLines(path);
Date
Date<-readLines(path);
path<-"E:/MachineLearning/R/functions/EQ.arff";
Date<-readLines(path,warn = FALSE);
close(path)
help(for)
help("for")
path<-"E:/MachineLearning/R/functions/EQ.arff";
Text<-readLines(path,warn = FALSE)
size(Text)
length(Text)
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
textLength<-length(arffText);
textLength<-length(textContent);
1:textLength
textContent(1,1)
textContent[1,1]
textContent[1]
help("grep")
gre(ptextContent[1],"@relation")
grep(ptextContent[1],"@relation")
grep(textContent[1],"@relation")
grep(textContent,"@relation")
agrep(textContent,"@relation")
agrep(textContent[1],"@relation")
agrep(textContent[1],"@relation EQ")
agrep(textContent[1],"@relation")
agrep(textContent,"@relation")
agrep(textContent,"@relation EQ",value = TRUE)
grep(textContent,"@relation",value = TRUE)
grep(textContent[1],"@relation",value = TRUE)
grep(textContent[1],"@relation.",value = TRUE)
grep(textContent[1],"@relation...",value = TRUE)
grep(textContent[1],[@relation...],value = TRUE)
grep(textContent[1],,value = TRUE,invert=TRUE)
grep(textContent[1],"@relation",value = TRUE,invert=TRUE)
grep(textContent[1],"@relation",invert=TRUE)
grep(textContent[2],"@relation",invert=TRUE)
grep(textContent[3],"@relation",invert=TRUE)
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
textLength<-length(textContent);
help("while")
help("grep")
grep("@relation",textContent)
grep("@attribute",textContent)
grep("@attribute",textContent,value = TRUE)
help("strsplit")
a<-grep("@attribute",textContent,value = TRUE)
a
a<-strsplit(a," ")
a
a[1]
a[1,1]
a[1]
a[1][1]
a[[1]][1]
a
feature<-grep(textContent,"@attribute");
feature<-grep("@attribute",textContent);
begin<-max(feature);
textContent[feature]
textContent[feature][1]
strsplit(textContent[feature][1]," ")
strsplit(textContent[feature][1]," ")[[1]]
strsplit(textContent[feature]," ")[[1]];
strsplit(textContent[feature]," ");
a<-c()
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
textName<-grep("@attribute",textContent);
begin<-max(textName);
textName<-strsplit(textContent[feature]," ");
feature<-c();
nameLength<-length(textName);
dim(textName);
dim(textName)
dim(Date)
help("name")
help("dim")
help("size")
help("nrow")
textName[[1:end]]
textName.end
length(textName)
textName[1:3]
textName[[1:@]]
textName[[1:3]]
textName[1:2][1]
textName[1:2][1][1]
textName[[1]][1][1]
textName[[1]][1]
textName[[1][1]]
help("rbind")
a<-martix(1,2);
a<-matrix(1,2);
b<-matrix(2,3);
a
b
rbind(a,b)
y<-matrix()
y<-rbind(y,a)
y
y<-textName[[1]]
x<-textName[[2]]
y<-rbind(y,x)
View(y)
listToMatrix<-function(x){
r<-length(x);
y<-x[[1]];
for (i in 1:r)
y<-rbind(y,x[[i]]);
y;
}
read.arff<-function(path){
open("path",open="r");
line<-readLines();
close("path");
return
}
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
textName<-grep("@attribute",textContent);
begin<-max(textName);
feature<-listToMatrix(strsplit(textContent[feature]," "))
feature<-grep("@attribute",textContent);
begin<-max(feature);
feature<-strsplit(textContent[feature]," ")
feature<-listToMatrix(strsplit(textContent[feature]," "))
feature<-strsplit(textContent[feature]," ")
feature<-grep("@attribute",textContent);
begin<-max(feature);
feature<-listToMatrix(strsplit(textContent[feature]," "))
View(feature)
nrow(feature)
feature<-feature[1:nrow(feature)][2]
feature
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
feature<-grep("@attribute",textContent);
begin<-max(feature);
feature<-listToMatrix(strsplit(textContent[feature]," "));
nrow(feature)
feature[1:nrow(feature)]
feature[1:nrow(feature),1]
feature[1:nrow(feature),2]
path<-"E:/MachineLearning/R/functions/EQ.arff";
textContent<-readLines(path,warn = FALSE);
feature<-grep("@attribute",textContent);
begin<-max(feature);
feature<-listToMatrix(strsplit(textContent[feature]," "));
feature<-feature[1:nrow(feature),2]
c(feature)
a<-c(feature)
paste(a,',')
help("strsplit")
library("abind", lib.loc="D:/Programming/R-3.2.5/library")
install.packages("F:/download/nloptr_1.0.4.tar.gz",""F:/",type="source")
install.packages("F:/download/nloptr_1.0.4.tar.gz","F:/",type="source")
install.packages("F:/download/nloptr_1.0.4 (1).tar.gz","F:/download",type="source")
install.packages("F:/download/nloptr_1.0.4.zip","F:/download")
a<-1
library(twitteR)
library(httr)
#library(SchedulerR)
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
install.packages("F:/twitteR_1.1.9.zip", repos = NULL, type = "win.binary")
library(twitteR)
library(httr)
#library(SchedulerR)
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
access_token <- "2300286260-JQUAxRqsMVKK2hMPzCeBtQ1q96HHJeAbEukIdIw"
access_token_secret <- "FhjV6104SEj010CVDaSLhpK4Ok0UQt18rxWIBW8xPoO4Y"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
tiffanyD <- userTimeline("TiffanyLD", n = 3200)
tiffanyD_df <- twListToDF(tiffanyD)
library(twitteR)
install.packages("F:/bit64_0.9-5.zip", repos = NULL, type = "win.binary")
library(twitteR)
library(twitteR)
install.packages("F:/bit_1.1-12.zip", repos = NULL, type = "win.binary")
library(twitteR)
install.packages("F:/rjson_0.2.15.zip", repos = NULL, type = "win.binary")
library(twitteR)
library(httr)
#library(SchedulerR)
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
access_token <- "2300286260-JQUAxRqsMVKK2hMPzCeBtQ1q96HHJeAbEukIdIw"
access_token_secret <- "FhjV6104SEj010CVDaSLhpK4Ok0UQt18rxWIBW8xPoO4Y"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
rm(list=ls())
)
)
library(twitteR)
library(httr)
rm(list=ls())
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
access_token <- "2300286260-JQUAxRqsMVKK2hMPzCeBtQ1q96HHJeAbEukIdIw"
access_token_secret <- "FhjV6104SEj010CVDaSLhpK4Ok0UQt18rxWIBW8xPoO4Y"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(twitteR)
library(httr)
#library(SchedulerR)
rm(list=ls())
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
access_token <- "2300286260-JQUAxRqsMVKK2hMPzCeBtQ1q96HHJeAbEukIdIw"
access_token_secret <- "FhjV6104SEj010CVDaSLhpK4Ok0UQt18rxWIBW8xPoO4Y"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
rm(list=ls())
api_key <- "is1ajurr7F0VbpH7aZoWd05bL"
api_secret <- "Nq75rtduSQdWpjQivOjEV3W6YXcT9jSiCRrug3qfzLq42oLIuv"
access_token <- "2300286260-JQUAxRqsMVKK2hMPzCeBtQ1q96HHJeAbEukIdIw"
access_token_secret <- "FhjV6104SEj010CVDaSLhpK4Ok0UQt18rxWIBW8xPoO4Y"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
tiffanyD <- userTimeline("TiffanyLD", n = 3200)
tiffanyD <- userTimeline("TiffanyLD", n = 3200)
setwd("E:/code/java/wekaLab/results/")
library(plotly);
rm(list=ls());
root<-"AEEEM";
getFolder<-function(path){
fileNames<-dir(path);
fileFilter<-c(-grep("\\.csv",fileNames));
return(fileNames[fileFilter])
}
getFileNames<-function(path){
fileNames<-dir(path);
fileFilter<-c(grep("\\.csv",fileNames));
return(fileNames[fileFilter])
}
getCSV<-function(path){
fileNames<-dir(path);
fileFilter<-c(grep("\\.csv",fileNames));
return(fileNames[fileFilter])
}
getFiles<-function(folderName,fileNames){
files<-list();
for (i in 1:fileNum) {
files<-c(files,list(read.csv(paste(folderName,'/',fileNames[i],sep=""))));
}
names(files)<-getNames(fileNames);
return(files);
}
getNames<-function(fileNames){
return(substr(fileNames,1,nchar(fileNames)-4));
}
getModes<-function(modes){
modesT<-c()
for (mode in modes) {
if(mode==0){
modesT<-c(modesT,'markers');
}else if(mode==1){
modesT<-c(modesT,'lines');
}else{
modesT<-c(modesT,'lines+markers');
}
}
return(modesT);
}
getCSV(root);
folderNames<-getFolder(root);
for(title in folderNames){
path<-paste(root,title,sep="/");
fileNames<-getFileNames(path);
fileNum<-length(fileNames);
files<-getFiles(path,fileNames);
maxFN<-0;
for (i in 2:length(files)) {
maxFN<-max(maxFN,files[[i]][,1]);
}
maxAUC<-0;
xa<-list(showline=TRUE,ticks='outside',tickfont=list(family="Arial Black",size=11,color='#000000'),title='Feature Number',
titlefont=list(family="Arial Black",size=13,color='#000000'),range=c(0,maxFN+1));
ya<-list(showline=TRUE,ticks='outside',tickfont=list(family="Arial Black",size=11,color='#000000'),title="AUC",
titlefont=list(family="Arial Black",size=13,color='#000000'));
modes<-rep(0,fileNum);
modes[4]<-2;
modes[5]<-2;
modes<-getModes(modes);
typeNames<-getNames(fileNames);
title<-paste(toupper(substr(title,1,1)),substr(title,2,nchar(title)),'(',files$Full[1,1],',',round(files$Full[1,2],2),')',sep = "");
marker=list(list(symbol=0,size=8),
list(symbol=1,size=8),
list(symbol=2,size=8),
list(symbol=2,size=8),
list(symbol=3,size=8))
t<-files[[4]];
files[[4]]<-files[[5]];
files[[5]]<-t;
p1<-plot_ly(type = 'scatter',mode = modes[2],
data=files[[2]],name=typeNames[2],marker=marker[[1]],x = ~Feature.number, y = ~AUC)%>%
layout(xaxis=xa,yaxis=ya,showlegend = FALSE,title=title,
titlefont=list(family="Arial Black",size=17,color='#000000'),
legend=list(orientation='v',font=list(family="Arial Black",color='#000000')),
height=300,width=500);
for (i in 3:length(files)) {
p1<<-p1%>%add_trace(data=files[[i]],name=typeNames[i],mode=modes[i],marker=marker[[i-1]]);
}
print(p1);
}
ratio<-read.csv(paste(root,"Selection ratio.csv",sep="/"));
t<-max(ratio[,2]);
me<-c();
md<-c();
for(i in 1:t){
r<-ratio[which(ratio[,2]==i),1];
md[i]<-median(r);
me[i]<-mean(r);
}
t<-sort(md*1000+me,decreasing=TRUE,index.return=TRUE)$ix;
ratio[,2]<-factor(ratio[,2],levels=c(t))
boxColor<-cbind(as.integer(seq(74,253,length.out = 20)),
as.integer(seq(20,134,length.out = 20)),
as.integer(seq(135,247,length.out = 20)))
boxColor<-paste("#",as.hexmode(boxColor[,1]),as.hexmode(boxColor[,2]),as.hexmode(boxColor[,3]),sep = "")
xa<-list(showline=TRUE,ticks='outside',title="Feature ID",titlefont=list(family="Arial Black",color='#000000'),tickangle=0,tickfont=list(family="Arial Black",size=11,color='#000000'));
ya<-list(showline=TRUE,ticks='outside',title="Selection ratio",titlefont=list(family="Arial Black",color='#000000'),range=c(0,1),tickfont=list(family="Arial Black",size=11,color='#000000'));
p2<-plot_ly(data=ratio,title="PROMISE",y=~SelectionRatio ,x = ~FeatureID ,color=~FeatureID,colors = boxColor,type='box')%>%
layout(xaxis=xa,yaxis=ya,showlegend = FALSE,height=300,width=500)
p2
